<Application
    x:Class="PixelRuler.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:custom="clr-namespace:PixelRuler.CustomControls"
    xmlns:local="clr-namespace:PixelRuler"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:views="clr-namespace:PixelRuler.Views">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Light" />
                <local:ThemesDictionary Theme="Light" />
                <ui:ControlsDictionary />
                <ResourceDictionary Source="Assets/ruler_inkscape_small_menu_icon.xaml" />
                <ResourceDictionary Source="Assets/horizontal.xaml" />
                <ResourceDictionary Source="Assets/2dimensions.xaml" />
                <ResourceDictionary Source="Assets/2dimensionsAlt.xaml" />
                <ResourceDictionary Source="CustomControls/SubtleComboBoxTemplate.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Storyboard x:Key="checkmarkStoryboard">
                <DoubleAnimation
                    Storyboard.TargetName="checkmarkIcon"
                    Storyboard.TargetProperty="Opacity"
                    From="0"
                    To="1"
                    Duration="0:0:.15" />
                <DoubleAnimation
                    Storyboard.TargetName="copyIcon"
                    Storyboard.TargetProperty="Opacity"
                    From="1"
                    To="0"
                    Duration="0:0:.15" />
                <DoubleAnimation
                    BeginTime="0:0:1.5"
                    Storyboard.TargetName="checkmarkIcon"
                    Storyboard.TargetProperty="Opacity"
                    From="1"
                    To="0"
                    Duration="0:0:.2" />
                <DoubleAnimation
                    BeginTime="0:0:1.5"
                    Storyboard.TargetName="copyIcon"
                    Storyboard.TargetProperty="Opacity"
                    From="0"
                    To="1"
                    Duration="0:0:.2" />
            </Storyboard>

            <ControlTemplate x:Key="ComboBoxSimpleSubtle" TargetType="ComboBox">
                <Grid>
                    <ToggleButton
                        x:Name="ToggleButton"
                        Grid.Column="2"
                        Width="100"
                        ClickMode="Press"
                        Focusable="false"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource SubtleToggleButtonStyle}" />
                    <ContentPresenter
                        x:Name="ContentSite"
                        Margin="3,3,23,3"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Stretch"
                        Content="{TemplateBinding SelectionBoxItem}"
                        IsHitTestVisible="False" />
                    <TextBox
                        x:Name="PART_EditableTextBox"
                        Margin="3,3,23,3"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Bottom"
                        Background="Transparent"
                        Focusable="True"
                        IsReadOnly="{TemplateBinding IsReadOnly}"
                        Style="{x:Null}"
                        Visibility="Hidden" />
                    <Popup
                        x:Name="Popup"
                        AllowsTransparency="True"
                        Focusable="False"
                        IsOpen="{TemplateBinding IsDropDownOpen}"
                        Placement="Bottom"
                        PopupAnimation="Slide">
                        <Grid
                            x:Name="DropDown"
                            MinWidth="{TemplateBinding ActualWidth}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            SnapsToDevicePixels="True">
                            <Border
                                x:Name="DropDownBorder"
                                BorderThickness="1"
                                CornerRadius="6">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                                </Border.BorderBrush>
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                                </Border.Background>
                            </Border>
                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Grid>
                    </Popup>
                </Grid>
            </ControlTemplate>
            <!--<FrameworkElement x:Key="EyeDropperCursor" Cursor="Assets/rasterized_segoe_colorpicker_contrast.cur" />-->
            <Cursor x:Key="EyeDropperCursor">Assets/rasterized_segoe_colorpicker_contrast_hotspot_offset24.cur</Cursor>

            <local:PercentFormatStringConverter x:Key="PercentFormatStringConverter" />
            <local:CollapseIfEmptyConverter x:Key="CollapseIfEmptyConverter" />
            <local:ColorFormatStringConverter x:Key="ColorFormatStringConverter" />
            <local:DrawingColorToWpfBrushConverter x:Key="DrawingColorToWpfBrushConverter" />
            <local:PointPositionStringConverter x:Key="PointPositionStringConverter" />
            <local:ColorConverter x:Key="ColorConverter" />
            <local:InvertBoolConverter x:Key="InvertBoolConverter" />
            <local:EnumToBoolCheckedStickyConverter x:Key="EnumToBoolCheckedStickyConverter" />
            <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <local:BoolToVisibilityInvertConverter x:Key="BoolToVisibilityInvertConverter" />
            <local:EnumToOptionConverter x:Key="EnumToOptionConverter" />
            <local:EnumToOptionsCollectionConverter x:Key="EnumToOptionsCollectionConverter" />
            <local:DoubleNaNZeroBlankConverter x:Key="DoubleNaNZeroBlankConverter" />
            <local:DoubleShouldShowPlaceholderConverter x:Key="DoubleShouldShowPlaceholderConverter" />
            <local:DisplayKeysConverter x:Key="DisplayKeysConverter" />
            <local:DisplayKeysMultiConverter x:Key="DisplayKeysMultiConverter" />
            <local:IsLastItemMultiConverter x:Key="IsLastItemMultiConverter" />
            <local:DebugConverter x:Key="DebugConverter" />

            <Style
                x:Key="SubtleToggleButtonStyle"
                BasedOn="{StaticResource {x:Type ToggleButton}}"
                TargetType="ToggleButton">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Style.Resources>
                    <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="{DynamicResource SubtleMouseOverColor}" />
                    <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="{DynamicResource SubtleMousePressedColor}" />
                    <SolidColorBrush x:Key="ToggleButtonBackground" Color="#00000000" />
                </Style.Resources>
            </Style>

            <DataTemplate x:Key="DefaultTemplate">
                <ContentPresenter Content="{Binding}" />
            </DataTemplate>
            <DataTemplate x:Key="BoldToastNotifStringTemplate">
                <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontSize="20"
                    Foreground="White"
                    Text="{Binding}" />
            </DataTemplate>
            <custom:ToastNotifTemplateSelector
                x:Key="ToastNotifTemplateSelector"
                BoldToastNotifStringTemplate="{StaticResource BoldToastNotifStringTemplate}"
                DefaultTemplate="{StaticResource DefaultTemplate}" />

            <Style TargetType="{x:Type custom:ToastNotificationSingle}">
                <Setter Property="Background" Value="#3C4042" />
                <Setter Property="IsHitTestVisible" Value="False" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type custom:ToastNotificationSingle}">
                            <Border
                                Width="200"
                                Height="50"
                                Background="{TemplateBinding Background}"
                                CornerRadius="6"
                                UseLayoutRounding="True">
                                <ContentPresenter Content="{TemplateBinding Content}" ContentTemplateSelector="{StaticResource ToastNotifTemplateSelector}" />
                                <Border.Effect>
                                    <DropShadowEffect
                                        BlurRadius="12"
                                        Direction="-90"
                                        Opacity=".3"
                                        ShadowDepth="4" />
                                </Border.Effect>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="toastInfoStyle"
                BasedOn="{StaticResource {x:Type custom:ToastNotificationSingle}}"
                TargetType="{x:Type custom:ToastNotificationSingle}">
                <Setter Property="Background" Value="#ffffff" />
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="IsHitTestVisible" Value="False" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Border
                            Width="100"
                            Height="100"
                            Background="Red" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="toastColorStyle"
                BasedOn="{StaticResource {x:Type custom:ToastNotificationSingle}}"
                TargetType="{x:Type custom:ToastNotificationSingle}">
                <Setter Property="Background" Value="#ffffff" />
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="IsHitTestVisible" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type custom:ToastNotificationSingle}">
                            <Border
                                Width="170"
                                Height="46"
                                Background="{TemplateBinding Background}"
                                CornerRadius="6"
                                UseLayoutRounding="True">
                                <Border.LayoutTransform>
                                    <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                                </Border.LayoutTransform>

                                <StackPanel
                                    Margin="2,0,0,0"
                                    VerticalAlignment="Center"
                                    Orientation="Horizontal">
                                    <Grid Margin="6,0,0,0">
                                        <Border
                                            Width="28"
                                            Height="28"
                                            Margin="3,0,0,0"
                                            Background="{Binding Color, Converter={StaticResource DrawingColorToWpfBrushConverter}}"
                                            CornerRadius="6" />
                                        <Border
                                            Width="28"
                                            Height="28"
                                            Margin="3,0,0,0"
                                            Background="Transparent"
                                            BorderBrush="#40000000"
                                            BorderThickness="1.5"
                                            CornerRadius="6" />
                                    </Grid>
                                    <StackPanel Orientation="Vertical">
                                        <TextBlock
                                            Margin="4,-3,0,0"
                                            FontSize="16"
                                            FontWeight="SemiBold"
                                            Foreground="#303030"
                                            Text="{Binding ColorText}" />
                                        <TextBlock
                                            Margin="6,-4,0,0"
                                            FontSize="11"
                                            FontWeight="SemiBold"
                                            Foreground="#606060"
                                            Text="Color Copied" />
                                    </StackPanel>

                                    <!--<Grid Margin="3,0,0,0">
                                        <Border
                                            Width="32"
                                            Height="32"
                                            Margin="3,0,0,0"
                                            Background="{Binding Color, Converter={StaticResource DrawingColorToWpfBrushConverter}, Mode=OneWay}"
                                            CornerRadius="8" />
                                        <Border
                                            Width="32"
                                            Height="32"
                                            Margin="3,0,0,0"
                                            Background="Transparent"
                                            BorderBrush="#40000000"
                                            BorderThickness="1.5"
                                            CornerRadius="8" />
                                    </Grid>
                                    <StackPanel
                                        Height="38"
                                        Margin="2,4"
                                        Orientation="Vertical">
                                        <TextBlock
                                            Margin="4,-2,0,0"
                                            FontSize="20"
                                            FontWeight="SemiBold"
                                            Foreground="#303030"
                                            Text="{Binding ColorText}" />
                                        <TextBlock
                                            Margin="6,-4,0,0"
                                            FontSize="12"
                                            FontWeight="SemiBold"
                                            Foreground="#606060"
                                            Text="Color Copied" />
                                    </StackPanel>-->
                                </StackPanel>



                                <Border.Effect>
                                    <DropShadowEffect
                                        BlurRadius="12"
                                        Direction="-90"
                                        Opacity=".3"
                                        ShadowDepth="4" />
                                </Border.Effect>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="SubtleButtonTemplate" TargetType="Button">
                <Border
                    Name="subtleButtonBorder"
                    Background="Transparent"
                    BorderThickness="0"
                    CornerRadius="4">
                    <ContentPresenter
                        Width="30"
                        Height="30"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Content="{TemplateBinding Content}" />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="subtleButtonBorder" Property="Background" Value="{DynamicResource SubtleMouseOverBrush}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="subtleButtonBorder" Property="Background" Value="{DynamicResource SubtleMousePressedBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <SolidColorBrush x:Key="BarColor">#F1F3F9</SolidColorBrush>
            <SolidColorBrush x:Key="IsToggledOnColor">#E8EAF0</SolidColorBrush>
            <SolidColorBrush x:Key="IsPressedColor">#EFEFF6</SolidColorBrush>
            <SolidColorBrush x:Key="ToggledHighlightColor">#80B9EE</SolidColorBrush>
            <SolidColorBrush x:Key="AnnotationColor">#EE4B2B</SolidColorBrush>

            <Style x:Key="SmallHeader" TargetType="Label">
                <Setter Property="FontSize" Value="12" />
                <Setter Property="Margin" Value="0,0,0,-4" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value=".5" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <CombinedGeometry x:Key="CopyIconPath" GeometryCombineMode="Union">
                <CombinedGeometry.Geometry1>
                    M768 832a128 128 0 0 1-128 128H192A128 128 0 0 1 64 832V384a128 128 0 0 1 128-128v64a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64h64z
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    M384 128a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64V192a64 64 0 0 0-64-64H384zm0-64h448a128 128 0 0 1 128 128v448a128 128 0 0 1-128 128H384a128 128 0 0 1-128-128V192A128 128 0 0 1 384 64z
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>

            <CombinedGeometry x:Key="PopOutIconPath" GeometryCombineMode="Union">
                <CombinedGeometry.Geometry1>
                    M27,33H5a2,2,0,0,1-2-2V9A2,2,0,0,1,5,7H15V9H5V31H27V21h2V31A2,2,0,0,1,27,33Z
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    M18,3a1,1,0,0,0,0,2H29.59L15.74,18.85a1,1,0,1,0,1.41,1.41L31,6.41V18a1,1,0,0,0,2,0V3Z
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>


            <ControlTemplate x:Key="CloseIconTemplate">
                <Grid Background="Transparent">
                    <Border
                        Width="1.5"
                        Height="30"
                        Background="{DynamicResource TextFillColorPrimaryBrush}"
                        CornerRadius=".5">
                        <Border.LayoutTransform>
                            <RotateTransform Angle="45" />
                        </Border.LayoutTransform>
                    </Border>
                    <Border
                        Width="1.5"
                        Height="30"
                        Background="{DynamicResource TextFillColorPrimaryBrush}"
                        CornerRadius=".5">
                        <Border.LayoutTransform>
                            <RotateTransform Angle="-45" />
                        </Border.LayoutTransform>
                    </Border>
                </Grid>
            </ControlTemplate>

            <ContentControl
                x:Key="CloseIcon"
                Width="30"
                Height="30"
                Opacity="1"
                Template="{StaticResource CloseIconTemplate}">
                <ContentControl.LayoutTransform>
                    <ScaleTransform ScaleX=".53" ScaleY=".53" />
                </ContentControl.LayoutTransform>
            </ContentControl>

            <Geometry x:Key="HiddenEyeIcon">
                M2.22 2.22a.75.75 0 0 0-.073.976l.073.084 4.034 4.035a9.986 9.986 0 0 0-3.955 5.75.75.75 0 0 0 1.455.364 8.49 8.49 0 0 1 3.58-5.034l1.81 1.81A4 4 0 0 0 14.8 15.86l5.919 5.92a.75.75 0 0 0 1.133-.977l-.073-.084-6.113-6.114.001-.002-1.2-1.198-2.87-2.87h.002L8.719 7.658l.001-.002-1.133-1.13L3.28 2.22a.75.75 0 0 0-1.06 0Zm7.984 9.045 3.535 3.536a2.5 2.5 0 0 1-3.535-3.535ZM12 5.5c-1 0-1.97.148-2.889.425l1.237 1.236a8.503 8.503 0 0 1 9.899 6.272.75.75 0 0 0 1.455-.363A10.003 10.003 0 0 0 12 5.5Zm.195 3.51 3.801 3.8a4.003 4.003 0 0 0-3.801-3.8Z
            </Geometry>
            <Geometry x:Key="ShownEyeIcon">
                M12 9.005a4 4 0 1 1 0 8 4 4 0 0 1 0-8Zm0 1.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5ZM12 5.5c4.613 0 8.596 3.15 9.701 7.564a.75.75 0 1 1-1.455.365 8.503 8.503 0 0 0-16.493.004.75.75 0 0 1-1.455-.363A10.003 10.003 0 0 1 12 5.5Z
            </Geometry>

            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>
            <Style TargetType="AccessText">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>
            <Style TargetType="ui:SymbolIcon">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style x:Key="GreyOutIfMenuItemDisabled" TargetType="TextBlock">
                <Setter Property="Opacity" Value="1" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="GreyOutIfDisabled" TargetType="TextBlock">
                <Setter Property="Opacity" Value="1" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="ui:TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style x:Key="ToggleButtonSoft" TargetType="ToggleButton">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>

                                <Border CornerRadius="6">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="Background" Value="{StaticResource BarColor}" />
                                            <Style.Triggers>


                                                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsToggledOnColor}" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsToggledOnColor}" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsPressedColor}" />
                                                </DataTrigger>

                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>

                                    <Border
                                        Margin="0,0,0,2"
                                        VerticalAlignment="Bottom"
                                        Background="{StaticResource ToggledHighlightColor}">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                                <Setter Property="Width" Value="20" />
                                                <Setter Property="Height" Value="4" />
                                                <Setter Property="CornerRadius" Value="2" />
                                                <Setter Property="Opacity" Value="1" />

                                                <Setter Property="LayoutTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                                    </Setter.Value>
                                                </Setter>

                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="LayoutTransform">
                                                            <Setter.Value>
                                                                <ScaleTransform ScaleX="1" ScaleY="1" />
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Opacity" Value=".8" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </Border>

                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type local:DropDownButtonCustom}" />


            <Style TargetType="{x:Type custom:TextBoxWithValidation}">
                <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type custom:TextBoxWithValidation}">
                            <StackPanel Orientation="Vertical">
                                <TextBox Text="{Binding Path=Text, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}">
                                    <TextBox.Style>
                                        <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="True">
                                                    <Setter Property="BorderBrush" Value="Red" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock
                                    Margin="4,0,0,0"
                                    FontSize="11"
                                    Foreground="Red">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="False">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                    <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CopyButtonStyle" TargetType="Path">
                <Setter Property="Margin" Value="6,2,0,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Data" Value="{StaticResource CopyIconPath}" />
                <Setter Property="Opacity" Value=".8" />
                <Setter Property="Fill" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX=".015" ScaleY=".015" />
                            <RotateTransform Angle="180" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter Property="RenderTransformOrigin">
                    <Setter.Value>
                        <Point X=".5" Y=".5" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CheckMarkStyle" TargetType="ui:SymbolIcon">
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Symbol" Value="Checkmark32" />
                <Setter Property="Filled" Value="True" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource GreenSuccess}" />
            </Style>

            <ControlTemplate x:Key="CopyButtonTemplate" TargetType="Button">
                <Border
                    Name="border"
                    Padding="5,0,5,0"
                    CornerRadius="3">
                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter />
                        <Grid Name="copyIconGrid" Visibility="Visible">
                            <ui:SymbolIcon
                                Name="checkmarkIcon"
                                Margin="5,2,0,0"
                                Opacity="0"
                                Style="{StaticResource CheckMarkStyle}" />
                            <Path
                                Name="copyIcon"
                                Margin="7,1,0,0"
                                Style="{StaticResource CopyButtonStyle}"
                                Visibility="Hidden" />
                        </Grid>
                    </StackPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter TargetName="border" Property="Background" Value="#00000000" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="border" Property="Background" Value="{DynamicResource HoverOverLight}" />
                        <Setter TargetName="copyIcon" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="border" Property="Background" Value="{DynamicResource PressedLight}" />
                    </Trigger>
                    <EventTrigger RoutedEvent="Button.Click">
                        <BeginStoryboard Storyboard="{StaticResource checkmarkStoryboard}" />
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Path
                x:Key="CopyButtonPathProper"
                Margin="0"
                Style="{StaticResource CopyButtonStyle}" />

            <ControlTemplate x:Key="iconShowEdit" TargetType="Control">
                <ToggleButton
                    Width="35"
                    Height="35"
                    Padding="0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    IsChecked="{Binding ElementName=Popup, Path=IsOpen}">
                    <ToggleButton.Content>
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <StackPanel
                                Name="editIcon"
                                Opacity="0"
                                Orientation="Vertical">
                                <ui:SymbolIcon Name="editSymbolIcon" Symbol="Edit24">
                                    <ui:SymbolIcon.LayoutTransform>
                                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                                    </ui:SymbolIcon.LayoutTransform>
                                </ui:SymbolIcon>
                                <TextBlock
                                    Name="editText"
                                    Margin="0,-5,0,0"
                                    HorizontalAlignment="Center"
                                    FontSize="10.2"
                                    FontWeight="SemiBold"
                                    Text="select" />
                                <Popup
                                    x:Name="Popup"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    HorizontalOffset="-384"
                                    Placement="Bottom"
                                    PlacementTarget="{Binding ElementName=iconEdit}"
                                    PopupAnimation="Fade"
                                    StaysOpen="False"
                                    VerticalOffset="2">
                                    <Border
                                        Grid.Row="1"
                                        Margin="40"
                                        Background="White"
                                        BorderBrush="#18000000"
                                        BorderThickness="1"
                                        CornerRadius="4"
                                        UseLayoutRounding="True"
                                        Visibility="Visible">
                                        <Border.Effect>
                                            <DropShadowEffect
                                                BlurRadius="8"
                                                Direction="270"
                                                Opacity=".3"
                                                ShadowDepth="2" />
                                        </Border.Effect>
                                        <views:IconSelectionControl
                                            Width="434"
                                            Height="332"
                                            DataContext="{Binding IconViewModel}"
                                            IconSelectedCommand="{Binding NewIconSelectedCommand}" />
                                    </Border>
                                </Popup>
                            </StackPanel>
                            <ui:SymbolIcon
                                Name="symbolIcon"
                                Opacity="1"
                                Symbol="{Binding IconViewModel.CurrentIcon}">
                                <ui:SymbolIcon.LayoutTransform>
                                    <ScaleTransform ScaleX="1.6" ScaleY="1.6" />
                                </ui:SymbolIcon.LayoutTransform>
                            </ui:SymbolIcon>
                        </Grid>
                    </ToggleButton.Content>
                    <ToggleButton.Style>
                        <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="ToggleButton">
                            <Style.Resources>
                                <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                                <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                                <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                            </Style.Resources>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="symbolIcon"
                                        Storyboard.TargetProperty="Opacity"
                                        From="1"
                                        To="0"
                                        Duration="0:0:.1" />
                                    <DoubleAnimation
                                        Storyboard.TargetName="editIcon"
                                        Storyboard.TargetProperty="Opacity"
                                        From="0"
                                        To="1"
                                        Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="symbolIcon"
                                        Storyboard.TargetProperty="Opacity"
                                        From="0"
                                        To="1"
                                        Duration="0:0:.1" />
                                    <DoubleAnimation
                                        Storyboard.TargetName="editIcon"
                                        Storyboard.TargetProperty="Opacity"
                                        From="1"
                                        To="0"
                                        Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>
