<Application
    x:Class="PixelRuler.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:custom="clr-namespace:PixelRuler.CustomControls"
    xmlns:local="clr-namespace:PixelRuler"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Light" />
                <local:ThemesDictionary Theme="Light" />
                <ui:ControlsDictionary />
                <ResourceDictionary Source="Assets/ruler_inkscape_small_menu_icon.xaml" />
                <ResourceDictionary Source="Assets/horizontal.xaml" />
                <ResourceDictionary Source="Assets/2dimensions.xaml" />
                <ResourceDictionary Source="Assets/2dimensionsAlt.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--<FrameworkElement x:Key="EyeDropperCursor" Cursor="Assets/rasterized_segoe_colorpicker_contrast.cur" />-->
            <Cursor x:Key="EyeDropperCursor">Assets/rasterized_segoe_colorpicker_contrast_hotspot_offset24.cur</Cursor>

            <local:PercentFormatStringConverter x:Key="PercentFormatStringConverter" />
            <local:ColorFormatStringConverter x:Key="ColorFormatStringConverter" />
            <local:DrawingColorToWpfBrushConverter x:Key="DrawingColorToWpfBrushConverter" />
            <local:PointPositionStringConverter x:Key="PointPositionStringConverter" />
            <local:ColorConverter x:Key="ColorConverter" />
            <local:InvertBoolConverter x:Key="InvertBoolConverter" />
            <local:EnumToBoolCheckedStickyConverter x:Key="EnumToBoolCheckedStickyConverter" />
            <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <local:BoolToVisibilityInvertConverter x:Key="BoolToVisibilityInvertConverter" />
            <local:EnumToOptionConverter x:Key="EnumToOptionConverter" />
            <local:EnumToOptionsCollectionConverter x:Key="EnumToOptionsCollectionConverter" />
            <local:DoubleNaNZeroBlankConverter x:Key="DoubleNaNZeroBlankConverter" />
            <local:DoubleShouldShowPlaceholderConverter x:Key="DoubleShouldShowPlaceholderConverter" />
            <local:DisplayKeysConverter x:Key="DisplayKeysConverter" />
            <local:DisplayKeysMultiConverter x:Key="DisplayKeysMultiConverter" />
            <local:DebugConverter x:Key="DebugConverter" />

            <Style
                x:Key="SubtleButtonStyle"
                BasedOn="{StaticResource {x:Type ToggleButton}}"
                TargetType="ToggleButton">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Style.Resources>
                    <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="#e0e0e0" />
                    <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="#b0b0b0" />
                    <SolidColorBrush x:Key="ToggleButtonBackground" Color="#00000000" />
                </Style.Resources>
            </Style>

            <SolidColorBrush x:Key="BarColor">#F1F3F9</SolidColorBrush>
            <SolidColorBrush x:Key="IsToggledOnColor">#E8EAF0</SolidColorBrush>
            <SolidColorBrush x:Key="IsPressedColor">#EFEFF6</SolidColorBrush>
            <SolidColorBrush x:Key="ToggledHighlightColor">#80B9EE</SolidColorBrush>
            <SolidColorBrush x:Key="AnnotationColor">#EE4B2B</SolidColorBrush>

            <Style x:Key="SmallHeader" TargetType="Label">
                <Setter Property="FontSize" Value="12" />
                <Setter Property="Margin" Value="0,0,0,-4" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value=".5" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <CombinedGeometry x:Key="CopyIconPath" GeometryCombineMode="Union">
                <CombinedGeometry.Geometry1>
                    M768 832a128 128 0 0 1-128 128H192A128 128 0 0 1 64 832V384a128 128 0 0 1 128-128v64a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64h64z
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    M384 128a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64V192a64 64 0 0 0-64-64H384zm0-64h448a128 128 0 0 1 128 128v448a128 128 0 0 1-128 128H384a128 128 0 0 1-128-128V192A128 128 0 0 1 384 64z
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>

            <CombinedGeometry x:Key="PopOutIconPath" GeometryCombineMode="Union">
                <CombinedGeometry.Geometry1>
                    M27,33H5a2,2,0,0,1-2-2V9A2,2,0,0,1,5,7H15V9H5V31H27V21h2V31A2,2,0,0,1,27,33Z
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    M18,3a1,1,0,0,0,0,2H29.59L15.74,18.85a1,1,0,1,0,1.41,1.41L31,6.41V18a1,1,0,0,0,2,0V3Z
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>

            <Geometry x:Key="HiddenEyeIcon">
                M2.22 2.22a.75.75 0 0 0-.073.976l.073.084 4.034 4.035a9.986 9.986 0 0 0-3.955 5.75.75.75 0 0 0 1.455.364 8.49 8.49 0 0 1 3.58-5.034l1.81 1.81A4 4 0 0 0 14.8 15.86l5.919 5.92a.75.75 0 0 0 1.133-.977l-.073-.084-6.113-6.114.001-.002-1.2-1.198-2.87-2.87h.002L8.719 7.658l.001-.002-1.133-1.13L3.28 2.22a.75.75 0 0 0-1.06 0Zm7.984 9.045 3.535 3.536a2.5 2.5 0 0 1-3.535-3.535ZM12 5.5c-1 0-1.97.148-2.889.425l1.237 1.236a8.503 8.503 0 0 1 9.899 6.272.75.75 0 0 0 1.455-.363A10.003 10.003 0 0 0 12 5.5Zm.195 3.51 3.801 3.8a4.003 4.003 0 0 0-3.801-3.8Z
            </Geometry>
            <Geometry x:Key="ShownEyeIcon">
                M12 9.005a4 4 0 1 1 0 8 4 4 0 0 1 0-8Zm0 1.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5ZM12 5.5c4.613 0 8.596 3.15 9.701 7.564a.75.75 0 1 1-1.455.365 8.503 8.503 0 0 0-16.493.004.75.75 0 0 1-1.455-.363A10.003 10.003 0 0 1 12 5.5Z
            </Geometry>

            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>
            <Style TargetType="AccessText">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>
            <Style TargetType="ui:SymbolIcon">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style x:Key="GreyOutIfDisabled" TargetType="TextBlock">
                <Setter Property="Opacity" Value="1" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="ui:TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style x:Key="ToggleButtonSoft" TargetType="ToggleButton">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>

                                <Border CornerRadius="6">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="Background" Value="{StaticResource BarColor}" />
                                            <Style.Triggers>


                                                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsToggledOnColor}" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsToggledOnColor}" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource IsPressedColor}" />
                                                </DataTrigger>

                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>

                                    <Border
                                        Margin="0,0,0,2"
                                        VerticalAlignment="Bottom"
                                        Background="{StaticResource ToggledHighlightColor}">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                                <Setter Property="Width" Value="20" />
                                                <Setter Property="Height" Value="4" />
                                                <Setter Property="CornerRadius" Value="2" />
                                                <Setter Property="Opacity" Value="1" />

                                                <Setter Property="LayoutTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                                    </Setter.Value>
                                                </Setter>

                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                        <Setter Property="LayoutTransform">
                                                            <Setter.Value>
                                                                <ScaleTransform ScaleX="1" ScaleY="1" />
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Opacity" Value=".8" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </Border>

                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type local:DropDownButtonCustom}" />


            <Style TargetType="{x:Type custom:TextBoxWithValidation}">
                <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type custom:TextBoxWithValidation}">
                            <StackPanel Orientation="Vertical">
                                <TextBox Text="{Binding Path=Text, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}">
                                    <TextBox.Style>
                                        <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="True">
                                                    <Setter Property="BorderBrush" Value="Red" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock
                                    Margin="4,0,0,0"
                                    FontSize="11"
                                    Foreground="Red">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="False">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.HasError)}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                    <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CopyButtonStyle" TargetType="Path">
                <Setter Property="Margin" Value="6,2,0,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Data" Value="{StaticResource CopyIconPath}" />
                <Setter Property="Opacity" Value=".8" />
                <Setter Property="Fill" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX=".015" ScaleY=".015" />
                            <RotateTransform Angle="180" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter Property="RenderTransformOrigin">
                    <Setter.Value>
                        <Point X=".5" Y=".5" />
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="CopyButtonTemplate" TargetType="Button">
                <Border
                    Name="border"
                    Padding="5,0,5,0"
                    CornerRadius="3">
                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter />
                        <Path
                            Name="copyIcon"
                            Margin="7,1,0,0"
                            Style="{StaticResource CopyButtonStyle}"
                            Visibility="Hidden" />
                    </StackPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter TargetName="border" Property="Background" Value="#00000000" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="border" Property="Background" Value="#18000000" />
                        <Setter TargetName="copyIcon" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="border" Property="Background" Value="#40000000" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>
